// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bertinatto/aws-efs-csi-driver-operator/pkg/apis/operator/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EFSCSIDriverLister helps list EFSCSIDrivers.
type EFSCSIDriverLister interface {
	// List lists all EFSCSIDrivers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EFSCSIDriver, err error)
	// EFSCSIDrivers returns an object that can list and get EFSCSIDrivers.
	EFSCSIDrivers(namespace string) EFSCSIDriverNamespaceLister
	EFSCSIDriverListerExpansion
}

// eFSCSIDriverLister implements the EFSCSIDriverLister interface.
type eFSCSIDriverLister struct {
	indexer cache.Indexer
}

// NewEFSCSIDriverLister returns a new EFSCSIDriverLister.
func NewEFSCSIDriverLister(indexer cache.Indexer) EFSCSIDriverLister {
	return &eFSCSIDriverLister{indexer: indexer}
}

// List lists all EFSCSIDrivers in the indexer.
func (s *eFSCSIDriverLister) List(selector labels.Selector) (ret []*v1alpha1.EFSCSIDriver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EFSCSIDriver))
	})
	return ret, err
}

// EFSCSIDrivers returns an object that can list and get EFSCSIDrivers.
func (s *eFSCSIDriverLister) EFSCSIDrivers(namespace string) EFSCSIDriverNamespaceLister {
	return eFSCSIDriverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EFSCSIDriverNamespaceLister helps list and get EFSCSIDrivers.
type EFSCSIDriverNamespaceLister interface {
	// List lists all EFSCSIDrivers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EFSCSIDriver, err error)
	// Get retrieves the EFSCSIDriver from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EFSCSIDriver, error)
	EFSCSIDriverNamespaceListerExpansion
}

// eFSCSIDriverNamespaceLister implements the EFSCSIDriverNamespaceLister
// interface.
type eFSCSIDriverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EFSCSIDrivers in the indexer for a given namespace.
func (s eFSCSIDriverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EFSCSIDriver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EFSCSIDriver))
	})
	return ret, err
}

// Get retrieves the EFSCSIDriver from the indexer for a given namespace and name.
func (s eFSCSIDriverNamespaceLister) Get(name string) (*v1alpha1.EFSCSIDriver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("efscsidriver"), name)
	}
	return obj.(*v1alpha1.EFSCSIDriver), nil
}
